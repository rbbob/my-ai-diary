name: Deploy AI Diary App

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            client/package-lock.json
            server/package-lock.json
      
      - name: Install client dependencies
        working-directory: ./client
        run: npm install
        
      - name: Install server dependencies
        working-directory: ./server
        run: npm install
      
      - name: Build frontend
        working-directory: ./client
        run: npm run build
        
      - name: Test server endpoints
        working-directory: ./server
        run: |
          npm start &
          SERVER_PID=$!
          sleep 5
          curl -f http://localhost:3004/api/health || exit 1
          kill $SERVER_PID

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Build Docker image
        run: |
          docker build -t ai-diary-app .
          
      - name: Test Docker container
        run: |
          docker run -d -p 3004:3004 --name ai-diary-test ai-diary-app
          sleep 10
          curl -f http://localhost:3004/api/health || exit 1
          docker stop ai-diary-test
          docker rm ai-diary-test

  deploy-vercel:
    needs: [test, build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Vercel CLI
        run: npm install --global vercel@latest
        
      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
        
      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
        
      - name: Deploy Project Artifacts to Vercel
        run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}